/*
 * O. Dadoun & N. Darrot October 2016
 * odadoun@gmail.com 
 * Use GLUT to display pixel color
 */
#include <iostream>
#include <fstream> 
#include "TheReaderUniverse/TheReaderUniverse.h"
#include <csignal>
#include <stdio.h>
#include <unistd.h>

/* For OpenGL Utility Toolkit (GLUT) */
float colorR = 0.0f;
float colorG = 0.0f;
float colorB = 0.0f;
int WindowHeight = 400;
int WindowWidth = 400;
/* ************************* */
void signalHandler(int signum);
void GetRGBUniverse();
void renderSceneLabels();
/* ************************* */
TheReaderUniverse reader_universe("onepixel.txt");
char xy_RGB[5][64];
fstream last_line_read;
bool position_defined = false;
/* ************************* */
int main(int argc, char **argv)
{
	reader_universe.load_constellations_abacus();
	signal(SIGINT, signalHandler);
        while(1) {
		int time_random;
		time_random = rand() % 100;
		cout << time_random/100. << endl;
		sleep(time_random/70.);
		GetRGBUniverse();}	
	return 0;
}
/* ************************* */
/* ************************* */
/* To catch CTRL C signal*/
void signalHandler(int signum) 
{
	cout << "Interrupt signal (" << signum << ") received.\n";
	cout << "Write last line number read into llr file ..." << reader_universe.GetLinesRead() << endl;
	// Catch last line read
	last_line_read.open("llr",ios::out);
	last_line_read << reader_universe.GetLinesRead();
	last_line_read.close();
	// cleanup and close up stuff here  
	// terminate program  
	exit(signum);  
}
/* ************************* */
void GetRGBUniverse()
{
	if(position_defined == false) 
	{
		unsigned long int line_position;
		last_line_read.open("llr",ios::in);
		if (last_line_read.is_open())
		{
			last_line_read >> line_position;
			last_line_read.close();
		}
		else 
			line_position=0;
		unsigned long int bytes_read=reader_universe.injection(line_position);	
		reader_universe.SetLinesRead(line_position);
		reader_universe.SetBytesRead(bytes_read);
		cout << " From the last line read, start @ line " << line_position 
			<< " bytes already readed  " <<  reader_universe.GetBytesRead() << endl;
		position_defined=true;
	}
	reader_universe.fill_sequence_online(xy_RGB);

	for(int i=0;i<=4;i++)
	{
		cout << " xy RGB values : " << xy_RGB[i] << endl;
	}

	int n=reader_universe.GetLinesRead();
	int tot_bytes=reader_universe.GetBytesRead();
	unsigned long int px=strtoul(xy_RGB[0],NULL,0);
	unsigned long int py=strtoul(xy_RGB[1],NULL,0);
	string name_const = reader_universe.return_constellation(px,py);

	fstream css;
	css.open("faune.css",ios::out);
	char temp[256];
	sprintf(temp,"(%ld,%ld,%ld)",xy_RGB[2],xy_RGB[3],xy_RGB[4]);
	css << "html,"<< endl;
	css << "body {"<<endl;
	css << "background-color: rgb(" << xy_RGB[2] << "," << xy_RGB[3] << "," << xy_RGB[4] << ");" << endl;
	css << "height: 100\%;}" << endl;  
	css << "p::before {" << endl;
	css << "position: absolute; \n bottom: 0;" << endl;
	css << "content: \"Pixel "<< n << " \t  Galactic coordinates \t"
            << reader_universe.GetLongitude(px) << " , "
            << reader_universe.GetLatitude(py) <<" \t / Constellation name  " << name_const << "\";\n}"<< endl;
        css.close();
	cout << "Nb Lines read : " << n << endl;
	cout << "Tot bytes : "     << tot_bytes << endl;
	cout << "Constellation name  : " << name_const << endl;
	cout << "Galactic coordinates "   <<  reader_universe.GetLongitude(px) << " " << reader_universe.GetLatitude(py) << endl;
}
/* ************************* */
void timer(int value)
{
	//changeColor?
	GetRGBUniverse();
	colorR = atof(xy_RGB[2])/255.;
	colorG = atof(xy_RGB[3])/255.;
	colorB = atof(xy_RGB[4])/255.;
	if (colorR > 1.0)
		colorR = 0;
	if (colorG > 1.0)
		colorG = 0;
	if (colorB > 1.0)
		colorB = 0;
}
/* ************************* */   
/* ************************* */   
void renderSceneLabels()
{
	cout << " renderSceneLabels" << colorR << " " << colorG <<  " " << colorB << endl;
	unsigned long int px=strtoul(xy_RGB[0],NULL,0);
	unsigned long int py=strtoul(xy_RGB[1],NULL,0);
	string name_const = reader_universe.return_constellation(px,py);
	//cout << name_const.size() << "Galactic coordinates "   <<  reader_universe.GetLongitude(px) << " " << reader_universe.GetLatitude(py) << endl;
	char temp[256];
	//empty or there is a constellation name ?
	if(name_const != "")
		sprintf(temp,"Pixel %d / Galactic coordinates \t %f° , %f°  / Constellation name : %s ",
				reader_universe.GetLinesRead(),
				reader_universe.GetLongitude(px),reader_universe.GetLongitude(py),name_const.c_str());
	else
		sprintf(temp,"Pixel %d / Galactic coordinates \t %f , %f",
				reader_universe.GetLinesRead(),
				reader_universe.GetLongitude(px),reader_universe.GetLongitude(py));
	string sentence = string(temp);
}
/* ************************* */   
/* ************************* */
